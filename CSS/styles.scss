body {
  display: flex;
  place-content: center;
  align-items: center;
  background-color: rgb(23, 23, 23);
  margin: 0;
}

.circularThingy {
  // Circular Selector variables -----------------
  --bubbleSize: 6rem;
  --itemListingRadius: 20em;
  --animationSpeed: 190s;
  --textColors: rgb(241, 241, 241);
  --backgroundColors: #1c7ab0;

  // -------------------------------------------
  margin-top: 30vh;
  width: 20em;
  height: 20em;
  border-radius: 50%;
  display: flex;
  place-content: center;
  align-items: center;
  position: relative;

  .circularContainer {
    display: flex;
    place-content: center;
    align-items: center;
    position: absolute;
    width: 90%;
    height: 90%;
    border-radius: 2em;
    animation: orbit var(--animationSpeed) linear infinite;

    &:hover {
      animation-play-state: paused;
      div {
        animation-play-state: paused;
        .item1circle,
        .item2circle,
        .item3circle,
        .item4circle,
        .item5circle,
        .item6circle,
        .item7circle,
        .item8circle {
          animation-play-state: paused;
        }
      }
    }

    //Center picture and stuff
    .centerPicture {
      position: absolute;
      width: 50%;
      height: 50%;
      background-color: rgb(45, 142, 42);
      border-radius: 1em;
      animation: orbitReverse var(--animationSpeed) linear infinite;

      img {
        width: 100%;
        height: 100%;
        border-radius: 1em;
      }
    }

    //links don't overlap (z-index) and text styles and stuff
    //For base link ball
    div {
      pointer-events: none;
      a {
        pointer-events: all;
        color: var(--textColors);
        font-weight: bold;
        text-decoration: none;
        z-index: 999; //why doesn't this work for all <a> elements?!
        width: var(--bubbleSize);
        height: var(--bubbleSize);
        border-radius: 50%;
        animation: orbitReverse var(--animationSpeed) linear infinite;
        position: relative;
        display: flex;
        place-content: center;
        align-items: center;
        background-color: var(--backgroundColors);
        margin-left: var(--itemListingRadius);
        transition-duration: 0.4s;
        &:hover {
          box-shadow: 0 0 1em rgba(191, 191, 191, 0.667);
        }
        img {
          border-radius: 50%;
          position: absolute;
          width: 102%;
          height: 102%;
          opacity: 1;
          transform: rotate(calc(-1 * var(--rotationAmount)));
          transition-duration: 0.4s;
          &:hover {
            opacity: 0;
          }
        }
      }

      a:visited {
        color: var(--textColors);
      }
    }

    //Link containers, bubbles going around, whatever
    .item1container {
      position: absolute;

      .item1circle {
      }
    }
    .item2container {
      --rotationAmount: 60deg;
      position: absolute;
      transform: rotate(var(--rotationAmount));
      .item2circle {
        p {
          transform: rotate(calc(-1 * var(--rotationAmount)));
        }
      }
    }
    .item3container {
      --rotationAmount: 120deg;
      position: absolute;
      transform: rotate(var(--rotationAmount));
      .item3circle {
        p {
          transform: rotate(calc(-1 * var(--rotationAmount)));
        }
      }
    }
    .item4container {
      --rotationAmount: 180deg;
      position: absolute;
      transform: rotate(var(--rotationAmount));
      .item4circle {
        p {
          transform: rotate(calc(-1 * var(--rotationAmount)));
        }
      }
    }
    .item5container {
      --rotationAmount: 240deg;
      position: absolute;
      transform: rotate(var(--rotationAmount));

      .item5circle {
        p {
          transform: rotate(calc(-1 * var(--rotationAmount)));
        }
      }
    }
    .item6container {
      --rotationAmount: 300deg;
      position: absolute;
      transform: rotate(var(--rotationAmount));
      .item6circle {
        p {
          transform: rotate(calc(-1 * var(--rotationAmount)));
        }
      }
    }
  }
}

//animations
@keyframes orbit {
  100% {
    transform: rotate(360deg);
  }
}
@keyframes orbitReverse {
  100% {
    transform: rotate(-360deg);
  }
}
